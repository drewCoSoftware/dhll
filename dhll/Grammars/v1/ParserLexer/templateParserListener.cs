//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="templateParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ItemplateParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.templates"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTemplates([NotNull] templateParser.TemplatesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.templates"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTemplates([NotNull] templateParser.TemplatesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlElements([NotNull] templateParser.HtmlElementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlElements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlElements([NotNull] templateParser.HtmlElementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlMisc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlMisc([NotNull] templateParser.HtmlMiscContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlMisc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlMisc([NotNull] templateParser.HtmlMiscContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.entityName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEntityName([NotNull] templateParser.EntityNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.entityName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEntityName([NotNull] templateParser.EntityNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlElement([NotNull] templateParser.HtmlElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlElement([NotNull] templateParser.HtmlElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlContent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlContent([NotNull] templateParser.HtmlContentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlContent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlContent([NotNull] templateParser.HtmlContentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] templateParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] templateParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlAttribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlAttribute([NotNull] templateParser.HtmlAttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlAttribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlAttribute([NotNull] templateParser.HtmlAttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlChardata"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterHtmlChardata([NotNull] templateParser.HtmlChardataContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlChardata"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitHtmlChardata([NotNull] templateParser.HtmlChardataContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RAW_EXPRESSION</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRAW_EXPRESSION([NotNull] templateParser.RAW_EXPRESSIONContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RAW_EXPRESSION</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRAW_EXPRESSION([NotNull] templateParser.RAW_EXPRESSIONContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DBL_QUOTE_STRING</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDBL_QUOTE_STRING([NotNull] templateParser.DBL_QUOTE_STRINGContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DBL_QUOTE_STRING</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDBL_QUOTE_STRING([NotNull] templateParser.DBL_QUOTE_STRINGContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.tag_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTag_expression([NotNull] templateParser.Tag_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.tag_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTag_expression([NotNull] templateParser.Tag_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] templateParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] templateParser.ExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_SUB</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_SUB([NotNull] templateParser.TO_SUBContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_SUB</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_SUB([NotNull] templateParser.TO_SUBContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ADD</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterADD([NotNull] templateParser.ADDContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ADD</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitADD([NotNull] templateParser.ADDContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_MULT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_MULT([NotNull] templateParser.TO_MULTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_MULT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_MULT([NotNull] templateParser.TO_MULTContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SUBTRACT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSUBTRACT([NotNull] templateParser.SUBTRACTContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SUBTRACT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSUBTRACT([NotNull] templateParser.SUBTRACTContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_DIV</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_DIV([NotNull] templateParser.TO_DIVContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_DIV</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_DIV([NotNull] templateParser.TO_DIVContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMULTIPLY([NotNull] templateParser.MULTIPLYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMULTIPLY([NotNull] templateParser.MULTIPLYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_UNARY</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_UNARY([NotNull] templateParser.TO_UNARYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_UNARY</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_UNARY([NotNull] templateParser.TO_UNARYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDIVIDE([NotNull] templateParser.DIVIDEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDIVIDE([NotNull] templateParser.DIVIDEContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NEGATE</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNEGATE([NotNull] templateParser.NEGATEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NEGATE</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNEGATE([NotNull] templateParser.NEGATEContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_PARENS</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_PARENS([NotNull] templateParser.TO_PARENSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_PARENS</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_PARENS([NotNull] templateParser.TO_PARENSContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PARENS</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPARENS([NotNull] templateParser.PARENSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PARENS</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPARENS([NotNull] templateParser.PARENSContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_CALL</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_CALL([NotNull] templateParser.TO_CALLContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_CALL</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_CALL([NotNull] templateParser.TO_CALLContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCALL([NotNull] templateParser.CALLContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCALL([NotNull] templateParser.CALLContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_PRIMARY</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTO_PRIMARY([NotNull] templateParser.TO_PRIMARYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_PRIMARY</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTO_PRIMARY([NotNull] templateParser.TO_PRIMARYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MAGIC_NUMBER</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMAGIC_NUMBER([NotNull] templateParser.MAGIC_NUMBERContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MAGIC_NUMBER</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMAGIC_NUMBER([NotNull] templateParser.MAGIC_NUMBERContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MAGIC_STRING</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMAGIC_STRING([NotNull] templateParser.MAGIC_STRINGContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MAGIC_STRING</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMAGIC_STRING([NotNull] templateParser.MAGIC_STRINGContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>VARIABLE</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVARIABLE([NotNull] templateParser.VARIABLEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>VARIABLE</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVARIABLE([NotNull] templateParser.VARIABLEContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ARGS</c>
	/// labeled alternative in <see cref="templateParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterARGS([NotNull] templateParser.ARGSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ARGS</c>
	/// labeled alternative in <see cref="templateParser.argList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitARGS([NotNull] templateParser.ARGSContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] templateParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.number"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] templateParser.NumberContext context);
}
} // namespace dhll.v1
