//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/TypeDef.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TypeDefLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ASSIGN=2, INT=3, FIRSTCHAR=4, ID=5, WORD=6, FALSE=7, TRUE=8, OBRACE=9, 
		CBRACE=10, EOS=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "ASSIGN", "INT", "FIRSTCHAR", "ID", "WORD", "FALSE", "TRUE", "OBRACE", 
		"CBRACE", "EOS", "WS"
	};


	public TypeDefLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TypeDefLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'typedef'", "'='", null, null, null, null, "'false'", "'true'", 
		"'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ASSIGN", "INT", "FIRSTCHAR", "ID", "WORD", "FALSE", "TRUE", 
		"OBRACE", "CBRACE", "EOS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TypeDef.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TypeDefLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,74,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,1,1,1,1,2,4,2,37,8,2,11,2,12,2,38,1,3,1,3,1,4,1,4,4,4,45,8,4,11,
		4,12,4,46,1,5,4,5,50,8,5,11,5,12,5,51,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,0,0,12,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,5,1,0,48,57,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,65,90,97,122,3,0,
		9,10,13,13,32,32,76,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,33,1,0,0,0,5,36,1,0,0,0,7,
		40,1,0,0,0,9,42,1,0,0,0,11,49,1,0,0,0,13,53,1,0,0,0,15,59,1,0,0,0,17,64,
		1,0,0,0,19,66,1,0,0,0,21,68,1,0,0,0,23,70,1,0,0,0,25,26,5,116,0,0,26,27,
		5,121,0,0,27,28,5,112,0,0,28,29,5,101,0,0,29,30,5,100,0,0,30,31,5,101,
		0,0,31,32,5,102,0,0,32,2,1,0,0,0,33,34,5,61,0,0,34,4,1,0,0,0,35,37,7,0,
		0,0,36,35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,6,1,0,0,
		0,40,41,7,1,0,0,41,8,1,0,0,0,42,44,3,7,3,0,43,45,7,2,0,0,44,43,1,0,0,0,
		45,46,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,10,1,0,0,0,48,50,7,3,0,0,
		49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,12,1,0,0,0,
		53,54,5,102,0,0,54,55,5,97,0,0,55,56,5,108,0,0,56,57,5,115,0,0,57,58,5,
		101,0,0,58,14,1,0,0,0,59,60,5,116,0,0,60,61,5,114,0,0,61,62,5,117,0,0,
		62,63,5,101,0,0,63,16,1,0,0,0,64,65,5,123,0,0,65,18,1,0,0,0,66,67,5,125,
		0,0,67,20,1,0,0,0,68,69,5,59,0,0,69,22,1,0,0,0,70,71,7,4,0,0,71,72,1,0,
		0,0,72,73,6,11,0,0,73,24,1,0,0,0,4,0,38,46,51,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
