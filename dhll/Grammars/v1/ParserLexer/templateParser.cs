//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class templateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEA_WS=1, TAG_OPEN=2, HTML_TEXT=3, EXP_OPEN=4, TAG_CLOSE=5, TAG_SLASH_CLOSE=6, 
		TAG_SLASH=7, TAG_EQUALS=8, TAG_NAME=9, TAG_WHITESPACE=10, TAG_DBL_QUOTE=11, 
		TAG_DQ_STR=12, TAG_EXP_OPEN=13, EXP_CLOSE=14, PLUS=15, MINUS=16, MULT=17, 
		DIVIDE=18, ID=19, OPEN_PAREN=20, CLOSE_PAREN=21, COMMA=22, INT=23, REAL=24, 
		EXP_DBL_QUOTE=25, EXP_DQ_STR=26, EXP_WS=27, ANY=28;
	public const int
		RULE_templates = 0, RULE_htmlElements = 1, RULE_htmlMisc = 2, RULE_entityName = 3, 
		RULE_htmlElement = 4, RULE_htmlContent = 5, RULE_expression = 6, RULE_htmlAttribute = 7, 
		RULE_htmlChardata = 8, RULE_attrValue = 9, RULE_tag_expression = 10, RULE_expr = 11, 
		RULE_addExp = 12, RULE_subExp = 13, RULE_multExp = 14, RULE_divExp = 15, 
		RULE_unaryExpr = 16, RULE_parensExp = 17, RULE_callExp = 18, RULE_primaryExpr = 19, 
		RULE_argList = 20, RULE_number = 21;
	public static readonly string[] ruleNames = {
		"templates", "htmlElements", "htmlMisc", "entityName", "htmlElement", 
		"htmlContent", "expression", "htmlAttribute", "htmlChardata", "attrValue", 
		"tag_expression", "expr", "addExp", "subExp", "multExp", "divExp", "unaryExpr", 
		"parensExp", "callExp", "primaryExpr", "argList", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", null, null, "'>'", "'/>'", null, "'='", null, null, 
		null, null, null, "'}'", "'+'", "'-'", "'*'", null, null, "'('", "')'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEA_WS", "TAG_OPEN", "HTML_TEXT", "EXP_OPEN", "TAG_CLOSE", "TAG_SLASH_CLOSE", 
		"TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "TAG_DBL_QUOTE", 
		"TAG_DQ_STR", "TAG_EXP_OPEN", "EXP_CLOSE", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"ID", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "INT", "REAL", "EXP_DBL_QUOTE", 
		"EXP_DQ_STR", "EXP_WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "templateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static templateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public templateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public templateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplatesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(templateParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HtmlElementsContext[] htmlElements() {
			return GetRuleContexts<HtmlElementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlElementsContext htmlElements(int i) {
			return GetRuleContext<HtmlElementsContext>(i);
		}
		public TemplatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templates; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplates(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplates(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplatesContext templates() {
		TemplatesContext _localctx = new TemplatesContext(Context, State);
		EnterRule(_localctx, 0, RULE_templates);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEA_WS || _la==TAG_OPEN) {
				{
				{
				State = 44;
				htmlElements();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HtmlElementContext htmlElement() {
			return GetRuleContext<HtmlElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlMiscContext[] htmlMisc() {
			return GetRuleContexts<HtmlMiscContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlMiscContext htmlMisc(int i) {
			return GetRuleContext<HtmlMiscContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementsContext htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_htmlElements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEA_WS) {
				{
				{
				State = 52;
				htmlMisc();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			htmlElement();
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 59;
					htmlMisc();
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlMiscContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(templateParser.SEA_WS, 0); }
		public HtmlMiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlMisc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlMisc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlMisc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlMisc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlMiscContext htmlMisc() {
		HtmlMiscContext _localctx = new HtmlMiscContext(Context, State);
		EnterRule(_localctx, 4, RULE_htmlMisc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(SEA_WS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(templateParser.TAG_NAME, 0); }
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_entityName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(TAG_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG_OPEN() { return GetTokens(templateParser.TAG_OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_OPEN(int i) {
			return GetToken(templateParser.TAG_OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TAG_CLOSE() { return GetTokens(templateParser.TAG_CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_CLOSE(int i) {
			return GetToken(templateParser.TAG_CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_SLASH_CLOSE() { return GetToken(templateParser.TAG_SLASH_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlContentContext htmlContent() {
			return GetRuleContext<HtmlContentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_SLASH() { return GetToken(templateParser.TAG_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(templateParser.TAG_NAME, 0); }
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_htmlElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(TAG_OPEN);
			State = 70;
			entityName();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 71;
				htmlAttribute();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG_CLOSE:
				{
				State = 77;
				Match(TAG_CLOSE);
				State = 84;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 78;
					htmlContent();
					State = 79;
					Match(TAG_OPEN);
					State = 80;
					Match(TAG_SLASH);
					State = 81;
					Match(TAG_NAME);
					State = 82;
					Match(TAG_CLOSE);
					}
					break;
				}
				}
				break;
			case TAG_SLASH_CLOSE:
				{
				State = 86;
				Match(TAG_SLASH_CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HtmlChardataContext[] htmlChardata() {
			return GetRuleContexts<HtmlChardataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlChardataContext htmlChardata(int i) {
			return GetRuleContext<HtmlChardataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public HtmlContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlContentContext htmlContent() {
		HtmlContentContext _localctx = new HtmlContentContext(Context, State);
		EnterRule(_localctx, 10, RULE_htmlContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEA_WS || _la==HTML_TEXT) {
				{
				State = 89;
				htmlChardata();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case TAG_OPEN:
						{
						State = 92;
						htmlElement();
						}
						break;
					case EXP_OPEN:
						{
						State = 93;
						expression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEA_WS || _la==HTML_TEXT) {
						{
						State = 96;
						htmlChardata();
						}
					}

					}
					} 
				}
				State = 103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_OPEN() { return GetToken(templateParser.EXP_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_CLOSE() { return GetToken(templateParser.EXP_CLOSE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(EXP_OPEN);
			State = 105;
			expr();
			State = 106;
			Match(EXP_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EQUALS() { return GetToken(templateParser.TAG_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttrValueContext attrValue() {
			return GetRuleContext<AttrValueContext>(0);
		}
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_htmlAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			entityName();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG_EQUALS) {
				{
				State = 109;
				Match(TAG_EQUALS);
				State = 110;
				attrValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlChardataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HTML_TEXT() { return GetToken(templateParser.HTML_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEA_WS() { return GetToken(templateParser.SEA_WS, 0); }
		public HtmlChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlChardata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterHtmlChardata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitHtmlChardata(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlChardata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlChardataContext htmlChardata() {
		HtmlChardataContext _localctx = new HtmlChardataContext(Context, State);
		EnterRule(_localctx, 16, RULE_htmlChardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==HTML_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrValueContext : ParserRuleContext {
		public AttrValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrValue; } }
	 
		public AttrValueContext() { }
		public virtual void CopyFrom(AttrValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DBL_QUOTE_STRINGContext : AttrValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_DQ_STR() { return GetToken(templateParser.TAG_DQ_STR, 0); }
		public DBL_QUOTE_STRINGContext(AttrValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterDBL_QUOTE_STRING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitDBL_QUOTE_STRING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDBL_QUOTE_STRING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RAW_EXPRESSIONContext : AttrValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Tag_expressionContext tag_expression() {
			return GetRuleContext<Tag_expressionContext>(0);
		}
		public RAW_EXPRESSIONContext(AttrValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterRAW_EXPRESSION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitRAW_EXPRESSION(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRAW_EXPRESSION(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrValueContext attrValue() {
		AttrValueContext _localctx = new AttrValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_attrValue);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG_EXP_OPEN:
				_localctx = new RAW_EXPRESSIONContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				tag_expression();
				}
				break;
			case TAG_DQ_STR:
				_localctx = new DBL_QUOTE_STRINGContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				Match(TAG_DQ_STR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EXP_OPEN() { return GetToken(templateParser.TAG_EXP_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_CLOSE() { return GetToken(templateParser.EXP_CLOSE, 0); }
		public Tag_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTag_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTag_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tag_expressionContext tag_expression() {
		Tag_expressionContext _localctx = new Tag_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_tag_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(TAG_EXP_OPEN);
			State = 120;
			expr();
			State = 121;
			Match(EXP_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExpContext addExp() {
			return GetRuleContext<AddExpContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			addExp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExpContext : ParserRuleContext {
		public AddExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExp; } }
	 
		public AddExpContext() { }
		public virtual void CopyFrom(AddExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TO_SUBContext : AddExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubExpContext subExp() {
			return GetRuleContext<SubExpContext>(0);
		}
		public TO_SUBContext(AddExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_SUB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_SUB(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_SUB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDContext : AddExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddExpContext addExp() {
			return GetRuleContext<AddExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(templateParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubExpContext subExp() {
			return GetRuleContext<SubExpContext>(0);
		}
		public ADDContext(AddExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterADD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitADD(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADD(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExpContext addExp() {
		return addExp(0);
	}

	private AddExpContext addExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AddExpContext _localctx = new AddExpContext(Context, _parentState);
		AddExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_addExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TO_SUBContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 126;
			subExp(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ADDContext(new AddExpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_addExp);
					State = 128;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 129;
					Match(PLUS);
					State = 130;
					subExp(0);
					}
					} 
				}
				State = 135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubExpContext : ParserRuleContext {
		public SubExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subExp; } }
	 
		public SubExpContext() { }
		public virtual void CopyFrom(SubExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TO_MULTContext : SubExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpContext multExp() {
			return GetRuleContext<MultExpContext>(0);
		}
		public TO_MULTContext(SubExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_MULT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_MULT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_MULT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUBTRACTContext : SubExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubExpContext subExp() {
			return GetRuleContext<SubExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(templateParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultExpContext multExp() {
			return GetRuleContext<MultExpContext>(0);
		}
		public SUBTRACTContext(SubExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterSUBTRACT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitSUBTRACT(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUBTRACT(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubExpContext subExp() {
		return subExp(0);
	}

	private SubExpContext subExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SubExpContext _localctx = new SubExpContext(Context, _parentState);
		SubExpContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_subExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TO_MULTContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 137;
			multExp(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SUBTRACTContext(new SubExpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_subExp);
					State = 139;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 140;
					Match(MINUS);
					State = 141;
					multExp(0);
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultExpContext : ParserRuleContext {
		public MultExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multExp; } }
	 
		public MultExpContext() { }
		public virtual void CopyFrom(MultExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TO_DIVContext : MultExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivExpContext divExp() {
			return GetRuleContext<DivExpContext>(0);
		}
		public TO_DIVContext(MultExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_DIV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_DIV(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_DIV(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULTIPLYContext : MultExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultExpContext multExp() {
			return GetRuleContext<MultExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(templateParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DivExpContext divExp() {
			return GetRuleContext<DivExpContext>(0);
		}
		public MULTIPLYContext(MultExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterMULTIPLY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitMULTIPLY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULTIPLY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultExpContext multExp() {
		return multExp(0);
	}

	private MultExpContext multExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultExpContext _localctx = new MultExpContext(Context, _parentState);
		MultExpContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_multExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TO_DIVContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 148;
			divExp(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MULTIPLYContext(new MultExpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_multExp);
					State = 150;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 151;
					Match(MULT);
					State = 152;
					divExp(0);
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DivExpContext : ParserRuleContext {
		public DivExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divExp; } }
	 
		public DivExpContext() { }
		public virtual void CopyFrom(DivExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TO_UNARYContext : DivExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public TO_UNARYContext(DivExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_UNARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_UNARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_UNARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DIVIDEContext : DivExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public DivExpContext divExp() {
			return GetRuleContext<DivExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(templateParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public DIVIDEContext(DivExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterDIVIDE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitDIVIDE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIVIDE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivExpContext divExp() {
		return divExp(0);
	}

	private DivExpContext divExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DivExpContext _localctx = new DivExpContext(Context, _parentState);
		DivExpContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_divExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new TO_UNARYContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 159;
			unaryExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 166;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DIVIDEContext(new DivExpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_divExp);
					State = 161;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 162;
					Match(DIVIDE);
					State = 163;
					unaryExpr();
					}
					} 
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
	 
		public UnaryExprContext() { }
		public virtual void CopyFrom(UnaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TO_PARENSContext : UnaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParensExpContext parensExp() {
			return GetRuleContext<ParensExpContext>(0);
		}
		public TO_PARENSContext(UnaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_PARENS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_PARENS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_PARENS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEGATEContext : UnaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(templateParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public NEGATEContext(UnaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterNEGATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitNEGATE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEGATE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_unaryExpr);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new NEGATEContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				Match(MINUS);
				State = 170;
				unaryExpr();
				}
				break;
			case ID:
			case OPEN_PAREN:
			case INT:
			case REAL:
			case EXP_DQ_STR:
				_localctx = new TO_PARENSContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				parensExp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParensExpContext : ParserRuleContext {
		public ParensExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parensExp; } }
	 
		public ParensExpContext() { }
		public virtual void CopyFrom(ParensExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PARENSContext : ParensExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(templateParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(templateParser.CLOSE_PAREN, 0); }
		public PARENSContext(ParensExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterPARENS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitPARENS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPARENS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TO_CALLContext : ParensExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallExpContext callExp() {
			return GetRuleContext<CallExpContext>(0);
		}
		public TO_CALLContext(ParensExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_CALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_CALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_CALL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParensExpContext parensExp() {
		ParensExpContext _localctx = new ParensExpContext(Context, State);
		EnterRule(_localctx, 34, RULE_parensExp);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				_localctx = new PARENSContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(OPEN_PAREN);
				State = 175;
				expr();
				State = 176;
				Match(CLOSE_PAREN);
				}
				break;
			case ID:
			case INT:
			case REAL:
			case EXP_DQ_STR:
				_localctx = new TO_CALLContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				callExp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallExpContext : ParserRuleContext {
		public CallExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callExp; } }
	 
		public CallExpContext() { }
		public virtual void CopyFrom(CallExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CALLContext : CallExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(templateParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(templateParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(templateParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public CALLContext(CallExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitCALL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TO_PRIMARYContext : CallExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public TO_PRIMARYContext(CallExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterTO_PRIMARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitTO_PRIMARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTO_PRIMARY(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallExpContext callExp() {
		CallExpContext _localctx = new CallExpContext(Context, State);
		EnterRule(_localctx, 36, RULE_callExp);
		int _la;
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new CALLContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(ID);
				State = 182;
				Match(OPEN_PAREN);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 93913088L) != 0)) {
					{
					State = 183;
					argList();
					}
				}

				State = 186;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new TO_PRIMARYContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 187;
				primaryExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
	 
		public PrimaryExprContext() { }
		public virtual void CopyFrom(PrimaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VARIABLEContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(templateParser.ID, 0); }
		public VARIABLEContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterVARIABLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitVARIABLE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVARIABLE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MAGIC_NUMBERContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public MAGIC_NUMBERContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterMAGIC_NUMBER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitMAGIC_NUMBER(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMAGIC_NUMBER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MAGIC_STRINGContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP_DQ_STR() { return GetToken(templateParser.EXP_DQ_STR, 0); }
		public MAGIC_STRINGContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterMAGIC_STRING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitMAGIC_STRING(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMAGIC_STRING(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_primaryExpr);
		try {
			State = 193;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case REAL:
				_localctx = new MAGIC_NUMBERContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				number();
				}
				break;
			case EXP_DQ_STR:
				_localctx = new MAGIC_STRINGContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				Match(EXP_DQ_STR);
				}
				break;
			case ID:
				_localctx = new VARIABLEContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
	 
		public ArgListContext() { }
		public virtual void CopyFrom(ArgListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ARGSContext : ArgListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(templateParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(templateParser.COMMA, i);
		}
		public ARGSContext(ArgListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterARGS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitARGS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitARGS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 40, RULE_argList);
		int _la;
		try {
			_localctx = new ARGSContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			expr();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 196;
				Match(COMMA);
				State = 197;
				expr();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(templateParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(templateParser.REAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ItemplateParserListener typedListener = listener as ItemplateParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItemplateParserVisitor<TResult> typedVisitor = visitor as ItemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return addExp_sempred((AddExpContext)_localctx, predIndex);
		case 13: return subExp_sempred((SubExpContext)_localctx, predIndex);
		case 14: return multExp_sempred((MultExpContext)_localctx, predIndex);
		case 15: return divExp_sempred((DivExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool addExp_sempred(AddExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool subExp_sempred(SubExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multExp_sempred(MultExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool divExp_sempred(DivExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,28,206,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,1,5,1,54,8,1,10,1,12,1,57,9,
		1,1,1,1,1,5,1,61,8,1,10,1,12,1,64,9,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,5,4,
		73,8,4,10,4,12,4,76,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,85,8,4,1,4,3,4,
		88,8,4,1,5,3,5,91,8,5,1,5,1,5,3,5,95,8,5,1,5,3,5,98,8,5,5,5,100,8,5,10,
		5,12,5,103,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,112,8,7,1,8,1,8,1,9,1,9,
		3,9,118,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
		5,12,132,8,12,10,12,12,12,135,9,12,1,13,1,13,1,13,1,13,1,13,1,13,5,13,
		143,8,13,10,13,12,13,146,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,14,154,8,
		14,10,14,12,14,157,9,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,165,8,15,10,
		15,12,15,168,9,15,1,16,1,16,1,16,3,16,173,8,16,1,17,1,17,1,17,1,17,1,17,
		3,17,180,8,17,1,18,1,18,1,18,3,18,185,8,18,1,18,1,18,3,18,189,8,18,1,19,
		1,19,1,19,3,19,194,8,19,1,20,1,20,1,20,5,20,199,8,20,10,20,12,20,202,9,
		20,1,21,1,21,1,21,0,4,24,26,28,30,22,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,0,2,2,0,1,1,3,3,1,0,23,24,206,0,47,1,0,0,0,
		2,55,1,0,0,0,4,65,1,0,0,0,6,67,1,0,0,0,8,69,1,0,0,0,10,90,1,0,0,0,12,104,
		1,0,0,0,14,108,1,0,0,0,16,113,1,0,0,0,18,117,1,0,0,0,20,119,1,0,0,0,22,
		123,1,0,0,0,24,125,1,0,0,0,26,136,1,0,0,0,28,147,1,0,0,0,30,158,1,0,0,
		0,32,172,1,0,0,0,34,179,1,0,0,0,36,188,1,0,0,0,38,193,1,0,0,0,40,195,1,
		0,0,0,42,203,1,0,0,0,44,46,3,2,1,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,
		0,0,0,47,48,1,0,0,0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,0,0,1,51,1,1,0,
		0,0,52,54,3,4,2,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,
		0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,62,3,8,4,0,59,61,3,4,2,0,60,59,1,0,
		0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,3,1,0,0,0,64,62,1,0,0,
		0,65,66,5,1,0,0,66,5,1,0,0,0,67,68,5,9,0,0,68,7,1,0,0,0,69,70,5,2,0,0,
		70,74,3,6,3,0,71,73,3,14,7,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,
		74,75,1,0,0,0,75,87,1,0,0,0,76,74,1,0,0,0,77,84,5,5,0,0,78,79,3,10,5,0,
		79,80,5,2,0,0,80,81,5,7,0,0,81,82,5,9,0,0,82,83,5,5,0,0,83,85,1,0,0,0,
		84,78,1,0,0,0,84,85,1,0,0,0,85,88,1,0,0,0,86,88,5,6,0,0,87,77,1,0,0,0,
		87,86,1,0,0,0,88,9,1,0,0,0,89,91,3,16,8,0,90,89,1,0,0,0,90,91,1,0,0,0,
		91,101,1,0,0,0,92,95,3,8,4,0,93,95,3,12,6,0,94,92,1,0,0,0,94,93,1,0,0,
		0,95,97,1,0,0,0,96,98,3,16,8,0,97,96,1,0,0,0,97,98,1,0,0,0,98,100,1,0,
		0,0,99,94,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,11,
		1,0,0,0,103,101,1,0,0,0,104,105,5,4,0,0,105,106,3,22,11,0,106,107,5,14,
		0,0,107,13,1,0,0,0,108,111,3,6,3,0,109,110,5,8,0,0,110,112,3,18,9,0,111,
		109,1,0,0,0,111,112,1,0,0,0,112,15,1,0,0,0,113,114,7,0,0,0,114,17,1,0,
		0,0,115,118,3,20,10,0,116,118,5,12,0,0,117,115,1,0,0,0,117,116,1,0,0,0,
		118,19,1,0,0,0,119,120,5,13,0,0,120,121,3,22,11,0,121,122,5,14,0,0,122,
		21,1,0,0,0,123,124,3,24,12,0,124,23,1,0,0,0,125,126,6,12,-1,0,126,127,
		3,26,13,0,127,133,1,0,0,0,128,129,10,2,0,0,129,130,5,15,0,0,130,132,3,
		26,13,0,131,128,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,25,1,0,0,0,135,133,1,0,0,0,136,137,6,13,-1,0,137,138,3,28,14,0,138,
		144,1,0,0,0,139,140,10,2,0,0,140,141,5,16,0,0,141,143,3,28,14,0,142,139,
		1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,27,1,0,0,0,
		146,144,1,0,0,0,147,148,6,14,-1,0,148,149,3,30,15,0,149,155,1,0,0,0,150,
		151,10,2,0,0,151,152,5,17,0,0,152,154,3,30,15,0,153,150,1,0,0,0,154,157,
		1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,29,1,0,0,0,157,155,1,0,0,0,
		158,159,6,15,-1,0,159,160,3,32,16,0,160,166,1,0,0,0,161,162,10,2,0,0,162,
		163,5,18,0,0,163,165,3,32,16,0,164,161,1,0,0,0,165,168,1,0,0,0,166,164,
		1,0,0,0,166,167,1,0,0,0,167,31,1,0,0,0,168,166,1,0,0,0,169,170,5,16,0,
		0,170,173,3,32,16,0,171,173,3,34,17,0,172,169,1,0,0,0,172,171,1,0,0,0,
		173,33,1,0,0,0,174,175,5,20,0,0,175,176,3,22,11,0,176,177,5,21,0,0,177,
		180,1,0,0,0,178,180,3,36,18,0,179,174,1,0,0,0,179,178,1,0,0,0,180,35,1,
		0,0,0,181,182,5,19,0,0,182,184,5,20,0,0,183,185,3,40,20,0,184,183,1,0,
		0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,189,5,21,0,0,187,189,3,38,19,0,
		188,181,1,0,0,0,188,187,1,0,0,0,189,37,1,0,0,0,190,194,3,42,21,0,191,194,
		5,26,0,0,192,194,5,19,0,0,193,190,1,0,0,0,193,191,1,0,0,0,193,192,1,0,
		0,0,194,39,1,0,0,0,195,200,3,22,11,0,196,197,5,22,0,0,197,199,3,22,11,
		0,198,196,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,
		41,1,0,0,0,202,200,1,0,0,0,203,204,7,1,0,0,204,43,1,0,0,0,22,47,55,62,
		74,84,87,90,94,97,101,111,117,133,144,155,166,172,179,184,188,193,200
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
