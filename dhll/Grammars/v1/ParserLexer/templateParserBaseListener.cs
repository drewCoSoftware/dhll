//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ItemplateParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class templateParserBaseListener : ItemplateParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.templates"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTemplates([NotNull] templateParser.TemplatesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.templates"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTemplates([NotNull] templateParser.TemplatesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlElements([NotNull] templateParser.HtmlElementsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlElements"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlElements([NotNull] templateParser.HtmlElementsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlMisc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlMisc([NotNull] templateParser.HtmlMiscContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlMisc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlMisc([NotNull] templateParser.HtmlMiscContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.entityName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEntityName([NotNull] templateParser.EntityNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.entityName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEntityName([NotNull] templateParser.EntityNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlElement([NotNull] templateParser.HtmlElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlElement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlElement([NotNull] templateParser.HtmlElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlContent([NotNull] templateParser.HtmlContentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlContent([NotNull] templateParser.HtmlContentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] templateParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] templateParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlAttribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlAttribute([NotNull] templateParser.HtmlAttributeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlAttribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlAttribute([NotNull] templateParser.HtmlAttributeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.htmlChardata"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHtmlChardata([NotNull] templateParser.HtmlChardataContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.htmlChardata"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHtmlChardata([NotNull] templateParser.HtmlChardataContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>RAW_EXPRESSION</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRAW_EXPRESSION([NotNull] templateParser.RAW_EXPRESSIONContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>RAW_EXPRESSION</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRAW_EXPRESSION([NotNull] templateParser.RAW_EXPRESSIONContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DBL_QUOTE_STRING</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDBL_QUOTE_STRING([NotNull] templateParser.DBL_QUOTE_STRINGContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DBL_QUOTE_STRING</c>
	/// labeled alternative in <see cref="templateParser.attrValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDBL_QUOTE_STRING([NotNull] templateParser.DBL_QUOTE_STRINGContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.tag_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTag_expression([NotNull] templateParser.Tag_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.tag_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTag_expression([NotNull] templateParser.Tag_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] templateParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] templateParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_SUB</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_SUB([NotNull] templateParser.TO_SUBContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_SUB</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_SUB([NotNull] templateParser.TO_SUBContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ADD</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterADD([NotNull] templateParser.ADDContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ADD</c>
	/// labeled alternative in <see cref="templateParser.addExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitADD([NotNull] templateParser.ADDContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_MULT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_MULT([NotNull] templateParser.TO_MULTContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_MULT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_MULT([NotNull] templateParser.TO_MULTContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SUBTRACT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSUBTRACT([NotNull] templateParser.SUBTRACTContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SUBTRACT</c>
	/// labeled alternative in <see cref="templateParser.subExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSUBTRACT([NotNull] templateParser.SUBTRACTContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_DIV</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_DIV([NotNull] templateParser.TO_DIVContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_DIV</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_DIV([NotNull] templateParser.TO_DIVContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMULTIPLY([NotNull] templateParser.MULTIPLYContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="templateParser.multExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMULTIPLY([NotNull] templateParser.MULTIPLYContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_UNARY</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_UNARY([NotNull] templateParser.TO_UNARYContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_UNARY</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_UNARY([NotNull] templateParser.TO_UNARYContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDIVIDE([NotNull] templateParser.DIVIDEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="templateParser.divExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDIVIDE([NotNull] templateParser.DIVIDEContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NEGATE</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNEGATE([NotNull] templateParser.NEGATEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NEGATE</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNEGATE([NotNull] templateParser.NEGATEContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_PARENS</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_PARENS([NotNull] templateParser.TO_PARENSContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_PARENS</c>
	/// labeled alternative in <see cref="templateParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_PARENS([NotNull] templateParser.TO_PARENSContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PARENS</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPARENS([NotNull] templateParser.PARENSContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PARENS</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPARENS([NotNull] templateParser.PARENSContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_CALL</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_CALL([NotNull] templateParser.TO_CALLContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_CALL</c>
	/// labeled alternative in <see cref="templateParser.parensExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_CALL([NotNull] templateParser.TO_CALLContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCALL([NotNull] templateParser.CALLContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CALL</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCALL([NotNull] templateParser.CALLContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TO_PRIMARY</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTO_PRIMARY([NotNull] templateParser.TO_PRIMARYContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TO_PRIMARY</c>
	/// labeled alternative in <see cref="templateParser.callExp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTO_PRIMARY([NotNull] templateParser.TO_PRIMARYContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MAGIC_NUMBER</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMAGIC_NUMBER([NotNull] templateParser.MAGIC_NUMBERContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MAGIC_NUMBER</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMAGIC_NUMBER([NotNull] templateParser.MAGIC_NUMBERContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MAGIC_STRING</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMAGIC_STRING([NotNull] templateParser.MAGIC_STRINGContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MAGIC_STRING</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMAGIC_STRING([NotNull] templateParser.MAGIC_STRINGContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VARIABLE</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVARIABLE([NotNull] templateParser.VARIABLEContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VARIABLE</c>
	/// labeled alternative in <see cref="templateParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVARIABLE([NotNull] templateParser.VARIABLEContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ARGS</c>
	/// labeled alternative in <see cref="templateParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterARGS([NotNull] templateParser.ARGSContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ARGS</c>
	/// labeled alternative in <see cref="templateParser.argList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitARGS([NotNull] templateParser.ARGSContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="templateParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] templateParser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="templateParser.number"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] templateParser.NumberContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace dhll.v1
