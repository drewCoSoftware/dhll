//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/dhll.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class dhllLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ASSIGN=2, INT=3, FALSE=4, TRUE=5, FIRSTCHAR=6, ID=7, WORD=8, QUOTE=9, 
		STRING=10, OBRACE=11, CBRACE=12, EOS=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "ASSIGN", "INT", "FALSE", "TRUE", "FIRSTCHAR", "ID", "WORD", "QUOTE", 
		"STRING", "OBRACE", "CBRACE", "EOS", "WS"
	};


	public dhllLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public dhllLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'typedef'", "'='", null, "'false'", "'true'", null, null, null, 
		"'\"'", null, "'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ASSIGN", "INT", "FALSE", "TRUE", "FIRSTCHAR", "ID", "WORD", 
		"QUOTE", "STRING", "OBRACE", "CBRACE", "EOS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "dhll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static dhllLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,89,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,4,2,41,8,2,11,2,12,2,42,1,3,1,3,
		1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,4,6,60,8,6,11,6,12,
		6,61,1,7,4,7,65,8,7,11,7,12,7,66,1,8,1,8,1,9,1,9,5,9,73,8,9,10,9,12,9,
		76,9,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,74,
		0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
		2,0,65,90,97,122,3,0,9,10,13,13,32,32,92,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,1,29,1,0,0,0,3,37,1,0,0,0,5,40,1,0,0,0,7,44,1,0,0,0,9,50,1,0,0,0,
		11,55,1,0,0,0,13,57,1,0,0,0,15,64,1,0,0,0,17,68,1,0,0,0,19,70,1,0,0,0,
		21,79,1,0,0,0,23,81,1,0,0,0,25,83,1,0,0,0,27,85,1,0,0,0,29,30,5,116,0,
		0,30,31,5,121,0,0,31,32,5,112,0,0,32,33,5,101,0,0,33,34,5,100,0,0,34,35,
		5,101,0,0,35,36,5,102,0,0,36,2,1,0,0,0,37,38,5,61,0,0,38,4,1,0,0,0,39,
		41,7,0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,
		6,1,0,0,0,44,45,5,102,0,0,45,46,5,97,0,0,46,47,5,108,0,0,47,48,5,115,0,
		0,48,49,5,101,0,0,49,8,1,0,0,0,50,51,5,116,0,0,51,52,5,114,0,0,52,53,5,
		117,0,0,53,54,5,101,0,0,54,10,1,0,0,0,55,56,7,1,0,0,56,12,1,0,0,0,57,59,
		3,11,5,0,58,60,7,2,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,
		1,0,0,0,62,14,1,0,0,0,63,65,7,3,0,0,64,63,1,0,0,0,65,66,1,0,0,0,66,64,
		1,0,0,0,66,67,1,0,0,0,67,16,1,0,0,0,68,69,5,34,0,0,69,18,1,0,0,0,70,74,
		3,17,8,0,71,73,9,0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,75,1,0,0,0,74,72,
		1,0,0,0,75,77,1,0,0,0,76,74,1,0,0,0,77,78,3,17,8,0,78,20,1,0,0,0,79,80,
		5,123,0,0,80,22,1,0,0,0,81,82,5,125,0,0,82,24,1,0,0,0,83,84,5,59,0,0,84,
		26,1,0,0,0,85,86,7,4,0,0,86,87,1,0,0,0,87,88,6,13,0,0,88,28,1,0,0,0,5,
		0,42,61,66,74,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
