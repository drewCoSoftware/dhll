//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/dhll.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class dhllLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ASSIGN=2, INT=3, FALSE=4, TRUE=5, PUBLIC=6, PRIVATE=7, PROP=8, 
		FIRSTCHAR=9, ID=10, WORD=11, SLASH=12, COMMENT=13, QUOTE=14, STRING=15, 
		OBRACE=16, CBRACE=17, EOS=18, LF=19, WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "ASSIGN", "INT", "FALSE", "TRUE", "PUBLIC", "PRIVATE", "PROP", 
		"FIRSTCHAR", "ID", "WORD", "SLASH", "COMMENT", "QUOTE", "STRING", "OBRACE", 
		"CBRACE", "EOS", "LF", "WS"
	};


	public dhllLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public dhllLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'typedef'", "'='", null, "'false'", "'true'", "'public'", "'private'", 
		"'prop'", null, null, null, "'/'", null, "'\"'", null, "'{'", "'}'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ASSIGN", "INT", "FALSE", "TRUE", "PUBLIC", "PRIVATE", "PROP", 
		"FIRSTCHAR", "ID", "WORD", "SLASH", "COMMENT", "QUOTE", "STRING", "OBRACE", 
		"CBRACE", "EOS", "LF", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "dhll.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static dhllLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,131,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,1,1,1,1,2,4,2,53,8,2,11,2,12,2,54,1,3,1,3,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,4,9,92,8,9,11,9,12,
		9,93,1,10,4,10,97,8,10,11,10,12,10,98,1,11,1,11,1,12,1,12,1,12,1,13,1,
		13,1,14,1,14,5,14,110,8,14,10,14,12,14,113,9,14,1,14,1,14,1,15,1,15,1,
		16,1,16,1,17,1,17,1,18,1,18,1,18,3,18,126,8,18,1,19,1,19,1,19,1,19,1,111,
		0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,5,1,0,48,57,3,0,65,90,95,95,
		97,122,4,0,48,57,65,90,95,95,97,122,2,0,65,90,97,122,3,0,9,10,13,13,32,
		32,135,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,49,1,0,0,
		0,5,52,1,0,0,0,7,56,1,0,0,0,9,62,1,0,0,0,11,67,1,0,0,0,13,74,1,0,0,0,15,
		82,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,21,96,1,0,0,0,23,100,1,0,0,0,25,
		102,1,0,0,0,27,105,1,0,0,0,29,107,1,0,0,0,31,116,1,0,0,0,33,118,1,0,0,
		0,35,120,1,0,0,0,37,125,1,0,0,0,39,127,1,0,0,0,41,42,5,116,0,0,42,43,5,
		121,0,0,43,44,5,112,0,0,44,45,5,101,0,0,45,46,5,100,0,0,46,47,5,101,0,
		0,47,48,5,102,0,0,48,2,1,0,0,0,49,50,5,61,0,0,50,4,1,0,0,0,51,53,7,0,0,
		0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,6,1,0,0,0,
		56,57,5,102,0,0,57,58,5,97,0,0,58,59,5,108,0,0,59,60,5,115,0,0,60,61,5,
		101,0,0,61,8,1,0,0,0,62,63,5,116,0,0,63,64,5,114,0,0,64,65,5,117,0,0,65,
		66,5,101,0,0,66,10,1,0,0,0,67,68,5,112,0,0,68,69,5,117,0,0,69,70,5,98,
		0,0,70,71,5,108,0,0,71,72,5,105,0,0,72,73,5,99,0,0,73,12,1,0,0,0,74,75,
		5,112,0,0,75,76,5,114,0,0,76,77,5,105,0,0,77,78,5,118,0,0,78,79,5,97,0,
		0,79,80,5,116,0,0,80,81,5,101,0,0,81,14,1,0,0,0,82,83,5,112,0,0,83,84,
		5,114,0,0,84,85,5,111,0,0,85,86,5,112,0,0,86,16,1,0,0,0,87,88,7,1,0,0,
		88,18,1,0,0,0,89,91,3,17,8,0,90,92,7,2,0,0,91,90,1,0,0,0,92,93,1,0,0,0,
		93,91,1,0,0,0,93,94,1,0,0,0,94,20,1,0,0,0,95,97,7,3,0,0,96,95,1,0,0,0,
		97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,22,1,0,0,0,100,101,5,47,0,
		0,101,24,1,0,0,0,102,103,3,23,11,0,103,104,3,23,11,0,104,26,1,0,0,0,105,
		106,5,34,0,0,106,28,1,0,0,0,107,111,3,27,13,0,108,110,9,0,0,0,109,108,
		1,0,0,0,110,113,1,0,0,0,111,112,1,0,0,0,111,109,1,0,0,0,112,114,1,0,0,
		0,113,111,1,0,0,0,114,115,3,27,13,0,115,30,1,0,0,0,116,117,5,123,0,0,117,
		32,1,0,0,0,118,119,5,125,0,0,119,34,1,0,0,0,120,121,5,59,0,0,121,36,1,
		0,0,0,122,126,5,10,0,0,123,124,5,13,0,0,124,126,5,10,0,0,125,122,1,0,0,
		0,125,123,1,0,0,0,126,38,1,0,0,0,127,128,7,4,0,0,128,129,1,0,0,0,129,130,
		6,19,0,0,130,40,1,0,0,0,6,0,54,93,98,111,125,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
