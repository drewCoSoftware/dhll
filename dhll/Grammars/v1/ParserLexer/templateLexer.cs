//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class templateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HTML_COMMENT=1, SEA_WS=2, TAG_OPEN=3, HTML_TEXT=4, TAG_CLOSE=5, TAG_SLASH_CLOSE=6, 
		TAG_SLASH=7, TAG_EQUALS=8, TAG_NAME=9, TAG_WHITESPACE=10, ATTVALUE_VALUE=11, 
		ATTRIBUTE=12;
	public const int
		TAG=1, ATTVALUE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TAG", "ATTVALUE"
	};

	public static readonly string[] ruleNames = {
		"HTML_COMMENT", "SEA_WS", "TAG_OPEN", "HTML_TEXT", "TAG_CLOSE", "TAG_SLASH_CLOSE", 
		"TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "HEXDIGIT", "DIGIT", 
		"TAG_NameChar", "TAG_NameStartChar", "ATTVALUE_VALUE", "ATTRIBUTE", "ATTCHARS", 
		"ATTCHAR", "HEXCHARS", "DECCHARS", "DOUBLE_QUOTE_STRING", "SINGLE_QUOTE_STRING", 
		"PROP_STRING"
	};


	public templateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public templateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'<'", null, "'>'", "'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HTML_COMMENT", "SEA_WS", "TAG_OPEN", "HTML_TEXT", "TAG_CLOSE", 
		"TAG_SLASH_CLOSE", "TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"ATTVALUE_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "templateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static templateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,191,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,0,5,0,56,8,0,10,0,12,0,
		59,9,0,1,0,1,0,1,0,1,0,1,1,1,1,3,1,67,8,1,1,1,4,1,70,8,1,11,1,12,1,71,
		1,2,1,2,1,2,1,2,1,3,4,3,79,8,3,11,3,12,3,80,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,5,8,100,8,8,10,8,12,8,103,9,
		8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,3,12,117,8,12,
		1,13,3,13,120,8,13,1,14,5,14,123,8,14,10,14,12,14,126,9,14,1,14,1,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,138,8,15,1,16,4,16,141,8,16,
		11,16,12,16,142,1,16,3,16,146,8,16,1,17,3,17,149,8,17,1,18,1,18,4,18,153,
		8,18,11,18,12,18,154,1,19,4,19,158,8,19,11,19,12,19,159,1,19,3,19,163,
		8,19,1,20,1,20,5,20,167,8,20,10,20,12,20,170,9,20,1,20,1,20,1,21,1,21,
		5,21,176,8,21,10,21,12,21,179,9,21,1,21,1,21,1,22,1,22,5,22,185,8,22,10,
		22,12,22,188,9,22,1,22,1,22,1,57,0,23,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,
		8,19,9,21,10,23,0,25,0,27,0,29,0,31,11,33,12,35,0,37,0,39,0,41,0,43,0,
		45,0,47,0,3,0,1,2,11,2,0,9,9,32,32,1,0,60,60,3,0,9,10,13,13,32,32,3,0,
		48,57,65,70,97,102,1,0,48,57,2,0,45,46,95,95,3,0,183,183,768,879,8255,
		8256,8,0,58,58,65,90,97,122,8304,8591,11264,12271,12289,55295,63744,64975,
		65008,65533,7,0,35,35,43,59,61,61,63,63,65,90,95,95,97,122,2,0,34,34,60,
		60,2,0,39,39,60,60,200,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		1,11,1,0,0,0,1,13,1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,0,0,1,21,
		1,0,0,0,2,31,1,0,0,0,2,33,1,0,0,0,3,49,1,0,0,0,5,69,1,0,0,0,7,73,1,0,0,
		0,9,78,1,0,0,0,11,82,1,0,0,0,13,86,1,0,0,0,15,91,1,0,0,0,17,93,1,0,0,0,
		19,97,1,0,0,0,21,104,1,0,0,0,23,108,1,0,0,0,25,110,1,0,0,0,27,116,1,0,
		0,0,29,119,1,0,0,0,31,124,1,0,0,0,33,137,1,0,0,0,35,140,1,0,0,0,37,148,
		1,0,0,0,39,150,1,0,0,0,41,157,1,0,0,0,43,164,1,0,0,0,45,173,1,0,0,0,47,
		182,1,0,0,0,49,50,5,60,0,0,50,51,5,33,0,0,51,52,5,45,0,0,52,53,5,45,0,
		0,53,57,1,0,0,0,54,56,9,0,0,0,55,54,1,0,0,0,56,59,1,0,0,0,57,58,1,0,0,
		0,57,55,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,61,5,45,0,0,61,62,5,45,
		0,0,62,63,5,62,0,0,63,4,1,0,0,0,64,70,7,0,0,0,65,67,5,13,0,0,66,65,1,0,
		0,0,66,67,1,0,0,0,67,68,1,0,0,0,68,70,5,10,0,0,69,64,1,0,0,0,69,66,1,0,
		0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,6,1,0,0,0,73,74,5,60,
		0,0,74,75,1,0,0,0,75,76,6,2,0,0,76,8,1,0,0,0,77,79,8,1,0,0,78,77,1,0,0,
		0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,10,1,0,0,0,82,83,5,62,0,
		0,83,84,1,0,0,0,84,85,6,4,1,0,85,12,1,0,0,0,86,87,5,47,0,0,87,88,5,62,
		0,0,88,89,1,0,0,0,89,90,6,5,1,0,90,14,1,0,0,0,91,92,5,47,0,0,92,16,1,0,
		0,0,93,94,5,61,0,0,94,95,1,0,0,0,95,96,6,7,2,0,96,18,1,0,0,0,97,101,3,
		29,13,0,98,100,3,27,12,0,99,98,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,
		101,102,1,0,0,0,102,20,1,0,0,0,103,101,1,0,0,0,104,105,7,2,0,0,105,106,
		1,0,0,0,106,107,6,9,3,0,107,22,1,0,0,0,108,109,7,3,0,0,109,24,1,0,0,0,
		110,111,7,4,0,0,111,26,1,0,0,0,112,117,3,29,13,0,113,117,7,5,0,0,114,117,
		3,25,11,0,115,117,7,6,0,0,116,112,1,0,0,0,116,113,1,0,0,0,116,114,1,0,
		0,0,116,115,1,0,0,0,117,28,1,0,0,0,118,120,7,7,0,0,119,118,1,0,0,0,120,
		30,1,0,0,0,121,123,5,32,0,0,122,121,1,0,0,0,123,126,1,0,0,0,124,122,1,
		0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,3,33,15,
		0,128,129,1,0,0,0,129,130,6,14,1,0,130,32,1,0,0,0,131,138,3,43,20,0,132,
		138,3,45,21,0,133,138,3,35,16,0,134,138,3,39,18,0,135,138,3,41,19,0,136,
		138,3,47,22,0,137,131,1,0,0,0,137,132,1,0,0,0,137,133,1,0,0,0,137,134,
		1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,34,1,0,0,0,139,141,3,37,17,
		0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,
		145,1,0,0,0,144,146,5,32,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,36,1,
		0,0,0,147,149,7,8,0,0,148,147,1,0,0,0,149,38,1,0,0,0,150,152,5,35,0,0,
		151,153,7,3,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,
		1,0,0,0,155,40,1,0,0,0,156,158,7,4,0,0,157,156,1,0,0,0,158,159,1,0,0,0,
		159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,5,37,0,0,162,161,
		1,0,0,0,162,163,1,0,0,0,163,42,1,0,0,0,164,168,5,34,0,0,165,167,8,9,0,
		0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,
		171,1,0,0,0,170,168,1,0,0,0,171,172,5,34,0,0,172,44,1,0,0,0,173,177,5,
		39,0,0,174,176,8,10,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,
		0,177,178,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,0,180,181,5,39,0,0,181,
		46,1,0,0,0,182,186,5,123,0,0,183,185,8,10,0,0,184,183,1,0,0,0,185,188,
		1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,1,0,0,
		0,189,190,5,125,0,0,190,48,1,0,0,0,22,0,1,2,57,66,69,71,80,101,116,119,
		124,137,142,145,148,154,159,162,168,177,186,4,5,1,0,4,0,0,5,2,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
