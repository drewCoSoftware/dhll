//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class templateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEA_WS=1, TAG_OPEN=2, HTML_TEXT=3, TAG_CLOSE=4, TAG_SLASH_CLOSE=5, TAG_SLASH=6, 
		TAG_EQUALS=7, TAG_NAME=8, TAG_WHITESPACE=9, ATTVALUE_VALUE=10, ATTRIBUTE=11;
	public const int
		TAG=1, ATTVALUE=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TAG", "ATTVALUE"
	};

	public static readonly string[] ruleNames = {
		"SEA_WS", "TAG_OPEN", "HTML_TEXT", "TAG_CLOSE", "TAG_SLASH_CLOSE", "TAG_SLASH", 
		"TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "HEXDIGIT", "DIGIT", "TAG_NameChar", 
		"TAG_NameStartChar", "ATTVALUE_VALUE", "ATTRIBUTE", "ATTCHARS", "ATTCHAR", 
		"HEXCHARS", "DECCHARS", "DOUBLE_QUOTE_STRING", "SINGLE_QUOTE_STRING", 
		"PROP_STRING"
	};


	public templateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public templateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", null, "'>'", "'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEA_WS", "TAG_OPEN", "HTML_TEXT", "TAG_CLOSE", "TAG_SLASH_CLOSE", 
		"TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "ATTVALUE_VALUE", 
		"ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "templateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static templateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,174,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,1,0,1,0,3,0,50,8,0,1,0,4,0,53,8,0,11,0,12,0,54,1,1,1,1,
		1,1,1,1,1,2,4,2,62,8,2,11,2,12,2,63,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,5,7,83,8,7,10,7,12,7,86,9,7,1,8,1,8,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,3,11,100,8,11,1,12,3,12,
		103,8,12,1,13,5,13,106,8,13,10,13,12,13,109,9,13,1,13,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,3,14,121,8,14,1,15,4,15,124,8,15,11,15,12,
		15,125,1,15,3,15,129,8,15,1,16,3,16,132,8,16,1,17,1,17,4,17,136,8,17,11,
		17,12,17,137,1,18,4,18,141,8,18,11,18,12,18,142,1,18,3,18,146,8,18,1,19,
		1,19,5,19,150,8,19,10,19,12,19,153,9,19,1,19,1,19,1,20,1,20,5,20,159,8,
		20,10,20,12,20,162,9,20,1,20,1,20,1,21,1,21,5,21,168,8,21,10,21,12,21,
		171,9,21,1,21,1,21,0,0,22,3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,
		0,23,0,25,0,27,0,29,10,31,11,33,0,35,0,37,0,39,0,41,0,43,0,45,0,3,0,1,
		2,11,2,0,9,9,32,32,1,0,60,60,3,0,9,10,13,13,32,32,3,0,48,57,65,70,97,102,
		1,0,48,57,2,0,45,46,95,95,3,0,183,183,768,879,8255,8256,8,0,58,58,65,90,
		97,122,8304,8591,11264,12271,12289,55295,63744,64975,65008,65533,7,0,35,
		35,43,59,61,61,63,63,65,90,95,95,97,122,2,0,34,34,60,60,2,0,39,39,60,60,
		182,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,1,9,1,0,0,0,1,11,1,0,0,0,1,13,
		1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,0,0,2,29,1,0,0,0,2,31,1,0,0,
		0,3,52,1,0,0,0,5,56,1,0,0,0,7,61,1,0,0,0,9,65,1,0,0,0,11,69,1,0,0,0,13,
		74,1,0,0,0,15,76,1,0,0,0,17,80,1,0,0,0,19,87,1,0,0,0,21,91,1,0,0,0,23,
		93,1,0,0,0,25,99,1,0,0,0,27,102,1,0,0,0,29,107,1,0,0,0,31,120,1,0,0,0,
		33,123,1,0,0,0,35,131,1,0,0,0,37,133,1,0,0,0,39,140,1,0,0,0,41,147,1,0,
		0,0,43,156,1,0,0,0,45,165,1,0,0,0,47,53,7,0,0,0,48,50,5,13,0,0,49,48,1,
		0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,51,53,5,10,0,0,52,47,1,0,0,0,52,49,1,
		0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,4,1,0,0,0,56,57,5,60,
		0,0,57,58,1,0,0,0,58,59,6,1,0,0,59,6,1,0,0,0,60,62,8,1,0,0,61,60,1,0,0,
		0,62,63,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,8,1,0,0,0,65,66,5,62,0,
		0,66,67,1,0,0,0,67,68,6,3,1,0,68,10,1,0,0,0,69,70,5,47,0,0,70,71,5,62,
		0,0,71,72,1,0,0,0,72,73,6,4,1,0,73,12,1,0,0,0,74,75,5,47,0,0,75,14,1,0,
		0,0,76,77,5,61,0,0,77,78,1,0,0,0,78,79,6,6,2,0,79,16,1,0,0,0,80,84,3,27,
		12,0,81,83,3,25,11,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,
		0,0,0,85,18,1,0,0,0,86,84,1,0,0,0,87,88,7,2,0,0,88,89,1,0,0,0,89,90,6,
		8,3,0,90,20,1,0,0,0,91,92,7,3,0,0,92,22,1,0,0,0,93,94,7,4,0,0,94,24,1,
		0,0,0,95,100,3,27,12,0,96,100,7,5,0,0,97,100,3,23,10,0,98,100,7,6,0,0,
		99,95,1,0,0,0,99,96,1,0,0,0,99,97,1,0,0,0,99,98,1,0,0,0,100,26,1,0,0,0,
		101,103,7,7,0,0,102,101,1,0,0,0,103,28,1,0,0,0,104,106,5,32,0,0,105,104,
		1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,
		0,109,107,1,0,0,0,110,111,3,31,14,0,111,112,1,0,0,0,112,113,6,13,1,0,113,
		30,1,0,0,0,114,121,3,41,19,0,115,121,3,43,20,0,116,121,3,33,15,0,117,121,
		3,37,17,0,118,121,3,39,18,0,119,121,3,45,21,0,120,114,1,0,0,0,120,115,
		1,0,0,0,120,116,1,0,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,
		0,121,32,1,0,0,0,122,124,3,35,16,0,123,122,1,0,0,0,124,125,1,0,0,0,125,
		123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,129,5,32,0,0,128,127,1,
		0,0,0,128,129,1,0,0,0,129,34,1,0,0,0,130,132,7,8,0,0,131,130,1,0,0,0,132,
		36,1,0,0,0,133,135,5,35,0,0,134,136,7,3,0,0,135,134,1,0,0,0,136,137,1,
		0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,38,1,0,0,0,139,141,7,4,0,0,140,
		139,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,145,1,
		0,0,0,144,146,5,37,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,40,1,0,0,0,
		147,151,5,34,0,0,148,150,8,9,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,
		1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,34,0,
		0,155,42,1,0,0,0,156,160,5,39,0,0,157,159,8,10,0,0,158,157,1,0,0,0,159,
		162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,
		0,0,0,163,164,5,39,0,0,164,44,1,0,0,0,165,169,5,123,0,0,166,168,8,10,0,
		0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,
		172,1,0,0,0,171,169,1,0,0,0,172,173,5,125,0,0,173,46,1,0,0,0,21,0,1,2,
		49,52,54,63,84,99,102,107,120,125,128,131,137,142,145,151,160,169,4,5,
		1,0,4,0,0,5,2,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
