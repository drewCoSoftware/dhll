//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./v1/templateLexer.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dhll.v1 {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class templateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEA_WS=1, TAG_OPEN=2, HTML_TEXT=3, EXP_OPEN=4, TAG_CLOSE=5, TAG_SLASH_CLOSE=6, 
		TAG_SLASH=7, TAG_EQUALS=8, TAG_NAME=9, TAG_WHITESPACE=10, TAG_DBL_QUOTE=11, 
		TAG_DQ_STR=12, TAG_EXP_OPEN=13, EXP_CLOSE=14, PLUS=15, MINUS=16, MULT=17, 
		DIVIDE=18, ID=19, OPEN_PAREN=20, CLOSE_PAREN=21, COMMA=22, INT=23, REAL=24, 
		EXP_DBL_QUOTE=25, EXP_DQ_STR=26, EXP_WS=27, ANY=28;
	public const int
		TAG=1, EXPRESSION=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "TAG", "EXPRESSION"
	};

	public static readonly string[] ruleNames = {
		"SEA_WS", "TAG_OPEN", "HTML_TEXT", "EXP_OPEN", "TAG_CLOSE", "TAG_SLASH_CLOSE", 
		"TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "HEXDIGIT", "DIGIT", 
		"TAG_NameChar", "TAG_NameStartChar", "TAG_DBL_QUOTE", "TAG_DQ_STR", "TAG_EXP_OPEN", 
		"EXP_CLOSE", "PLUS", "MINUS", "MULT", "DIVIDE", "ID", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "INT", "REAL", "EXP_DBL_QUOTE", "EXP_DQ_STR", "EXP_WS", "ANY"
	};


	public templateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public templateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'<'", null, null, "'>'", "'/>'", null, "'='", null, null, 
		null, null, null, "'}'", "'+'", "'-'", "'*'", null, null, "'('", "')'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEA_WS", "TAG_OPEN", "HTML_TEXT", "EXP_OPEN", "TAG_CLOSE", "TAG_SLASH_CLOSE", 
		"TAG_SLASH", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", "TAG_DBL_QUOTE", 
		"TAG_DQ_STR", "TAG_EXP_OPEN", "EXP_CLOSE", "PLUS", "MINUS", "MULT", "DIVIDE", 
		"ID", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "INT", "REAL", "EXP_DBL_QUOTE", 
		"EXP_DQ_STR", "EXP_WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "templateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static templateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,199,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,3,0,70,8,0,1,0,4,
		0,73,8,0,11,0,12,0,74,1,1,1,1,1,1,1,1,1,2,4,2,82,8,2,11,2,12,2,83,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
		8,5,8,105,8,8,10,8,12,8,108,9,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,12,1,12,3,12,122,8,12,1,13,3,13,125,8,13,1,14,1,14,1,15,1,15,
		5,15,131,8,15,10,15,12,15,134,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,5,22,
		156,8,22,10,22,12,22,159,9,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,4,26,
		168,8,26,11,26,12,26,169,1,27,4,27,173,8,27,11,27,12,27,174,1,27,1,27,
		4,27,179,8,27,11,27,12,27,180,1,28,1,28,1,29,1,29,5,29,187,8,29,10,29,
		12,29,190,9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,174,0,32,3,1,
		5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,0,25,0,27,0,29,0,31,11,33,
		12,35,13,37,14,39,15,41,16,43,17,45,18,47,19,49,20,51,21,53,22,55,23,57,
		24,59,25,61,26,63,27,65,28,3,0,1,2,11,2,0,9,9,32,32,2,0,60,60,123,123,
		3,0,9,10,13,13,32,32,3,0,48,57,65,70,97,102,1,0,48,57,2,0,45,46,95,95,
		3,0,183,183,768,879,8255,8256,8,0,58,58,65,90,97,122,8304,8591,11264,12271,
		12289,55295,63744,64975,65008,65533,1,0,34,34,3,0,65,90,95,95,97,122,4,
		0,48,57,65,90,95,95,97,122,206,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,1,11,1,0,0,0,1,13,1,0,0,0,1,15,1,0,0,0,1,17,1,0,0,0,1,19,1,0,0,
		0,1,21,1,0,0,0,1,31,1,0,0,0,1,33,1,0,0,0,1,35,1,0,0,0,2,37,1,0,0,0,2,39,
		1,0,0,0,2,41,1,0,0,0,2,43,1,0,0,0,2,45,1,0,0,0,2,47,1,0,0,0,2,49,1,0,0,
		0,2,51,1,0,0,0,2,53,1,0,0,0,2,55,1,0,0,0,2,57,1,0,0,0,2,59,1,0,0,0,2,61,
		1,0,0,0,2,63,1,0,0,0,2,65,1,0,0,0,3,72,1,0,0,0,5,76,1,0,0,0,7,81,1,0,0,
		0,9,85,1,0,0,0,11,89,1,0,0,0,13,93,1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,
		0,19,102,1,0,0,0,21,109,1,0,0,0,23,113,1,0,0,0,25,115,1,0,0,0,27,121,1,
		0,0,0,29,124,1,0,0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,137,1,0,0,0,37,141,
		1,0,0,0,39,145,1,0,0,0,41,147,1,0,0,0,43,149,1,0,0,0,45,151,1,0,0,0,47,
		153,1,0,0,0,49,160,1,0,0,0,51,162,1,0,0,0,53,164,1,0,0,0,55,167,1,0,0,
		0,57,172,1,0,0,0,59,182,1,0,0,0,61,184,1,0,0,0,63,193,1,0,0,0,65,197,1,
		0,0,0,67,73,7,0,0,0,68,70,5,13,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,
		0,0,0,71,73,5,10,0,0,72,67,1,0,0,0,72,69,1,0,0,0,73,74,1,0,0,0,74,72,1,
		0,0,0,74,75,1,0,0,0,75,4,1,0,0,0,76,77,5,60,0,0,77,78,1,0,0,0,78,79,6,
		1,0,0,79,6,1,0,0,0,80,82,8,1,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,
		0,0,83,84,1,0,0,0,84,8,1,0,0,0,85,86,5,123,0,0,86,87,1,0,0,0,87,88,6,3,
		1,0,88,10,1,0,0,0,89,90,5,62,0,0,90,91,1,0,0,0,91,92,6,4,2,0,92,12,1,0,
		0,0,93,94,5,47,0,0,94,95,5,62,0,0,95,96,1,0,0,0,96,97,6,5,2,0,97,14,1,
		0,0,0,98,99,5,47,0,0,99,16,1,0,0,0,100,101,5,61,0,0,101,18,1,0,0,0,102,
		106,3,29,13,0,103,105,3,27,12,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,
		1,0,0,0,106,107,1,0,0,0,107,20,1,0,0,0,108,106,1,0,0,0,109,110,7,2,0,0,
		110,111,1,0,0,0,111,112,6,9,3,0,112,22,1,0,0,0,113,114,7,3,0,0,114,24,
		1,0,0,0,115,116,7,4,0,0,116,26,1,0,0,0,117,122,3,29,13,0,118,122,7,5,0,
		0,119,122,3,25,11,0,120,122,7,6,0,0,121,117,1,0,0,0,121,118,1,0,0,0,121,
		119,1,0,0,0,121,120,1,0,0,0,122,28,1,0,0,0,123,125,7,7,0,0,124,123,1,0,
		0,0,125,30,1,0,0,0,126,127,5,34,0,0,127,32,1,0,0,0,128,132,3,31,14,0,129,
		131,8,8,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,
		0,0,0,133,135,1,0,0,0,134,132,1,0,0,0,135,136,3,31,14,0,136,34,1,0,0,0,
		137,138,5,123,0,0,138,139,1,0,0,0,139,140,6,16,1,0,140,36,1,0,0,0,141,
		142,5,125,0,0,142,143,1,0,0,0,143,144,6,17,2,0,144,38,1,0,0,0,145,146,
		5,43,0,0,146,40,1,0,0,0,147,148,5,45,0,0,148,42,1,0,0,0,149,150,5,42,0,
		0,150,44,1,0,0,0,151,152,5,47,0,0,152,46,1,0,0,0,153,157,7,9,0,0,154,156,
		7,10,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,
		0,158,48,1,0,0,0,159,157,1,0,0,0,160,161,5,40,0,0,161,50,1,0,0,0,162,163,
		5,41,0,0,163,52,1,0,0,0,164,165,5,44,0,0,165,54,1,0,0,0,166,168,3,25,11,
		0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,
		56,1,0,0,0,171,173,3,25,11,0,172,171,1,0,0,0,173,174,1,0,0,0,174,175,1,
		0,0,0,174,172,1,0,0,0,175,176,1,0,0,0,176,178,5,46,0,0,177,179,3,25,11,
		0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,
		58,1,0,0,0,182,183,5,34,0,0,183,60,1,0,0,0,184,188,3,31,14,0,185,187,8,
		8,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,
		189,191,1,0,0,0,190,188,1,0,0,0,191,192,3,31,14,0,192,62,1,0,0,0,193,194,
		7,2,0,0,194,195,1,0,0,0,195,196,6,30,4,0,196,64,1,0,0,0,197,198,9,0,0,
		0,198,66,1,0,0,0,16,0,1,2,69,72,74,83,106,121,124,132,157,169,174,180,
		188,5,5,1,0,5,2,0,4,0,0,0,1,0,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace dhll.v1
